import os
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import psycopg2
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set page configuration
st.set_page_config(layout="wide", page_title="‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á")

# Function to load data from database
@st.cache_data(show_spinner=False)
def load_data_from_db(table_name):
    try:
        conn = psycopg2.connect(os.getenv("DATABASE_URL"))
        if table_name == "actual_costs":
            query = """
            SELECT g_code, s_code, description, boq, total_budget, total_actual, bg_balance,
                   ac_material, ac_subcontract, pg_submit_balance, "to",
                   bg_overhead, bg_material, bg_labour, bg_subcontract,
                   ac_overhead, ac_labour, pg_submit, pg_certificate,
                   created_at, updated_at
            FROM actual_costs
            WHERE total_budget IS NOT NULL AND total_actual IS NOT NULL
            """
        elif table_name == "summary_costs":
            query = """
            SELECT id, g_code, s_code, description, boq, budget, cost_saving, purchase_cost,
                   pr_pending, budget_balance_pu, actual_cost_ac, unbook, actual_cost_all,
                   budget_balance_ac, purchase_balance, forecast, to_be_order, variance_budget,
                   finance_cost, finance_balance, "to", created_at, updated_at
            FROM summary_costs
            """
        elif table_name == "progress_payments":
            query = """
            SELECT project_no, project_name, year, month, payment_date, period,
                   progress_submit, certificate, submit_balance, remark, ref_no, no,
                   created_at, updated_at
            FROM progress_payments
            """
        df = pd.read_sql(query, conn)
        conn.close()
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table_name}: {str(e)}")
        return pd.DataFrame()

# Load data from multiple tables
df_actual = load_data_from_db("actual_costs")
df_summary = load_data_from_db("summary_costs")
df_payment = load_data_from_db("progress_payments")

# Check if DataFrames are empty
if df_actual.empty:
    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á actual_costs ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.stop()
if df_summary.empty:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á summary_costs")
if df_payment.empty:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á progress_payments")

# Rename columns for consistency in actual_costs
df_actual = df_actual.rename(columns={
    'pg_certificate': 'bcwp',
    'pg_submit': 'ev',
    'to': 'to_column'
})

# Data preprocessing for actual_costs
numeric_cols = [
    'total_budget', 'total_actual', 'bcwp', 'ev', 'bg_balance',
    'boq', 'bg_overhead', 'bg_material', 'bg_labour', 'bg_subcontract',
    'ac_overhead', 'ac_material', 'ac_labour', 'ac_subcontract',
    'pg_submit_balance'
]
available_cols = [col for col in numeric_cols if col in df_actual.columns]
for col in available_cols:
    df_actual[col] = pd.to_numeric(df_actual[col], errors='coerce')

# Calculate percentage variance
df_actual['variance_percentage'] = (df_actual['bg_balance'] / df_actual['total_budget'] * 100).round(2).fillna(0)

# Handle NULL values in 'to_column' for treemap
df_actual['to_column'] = df_actual['to_column'].fillna('root')

# Create hierarchy label for treemap
df_actual['hierarchy_label'] = df_actual.apply(
    lambda row: f"{row['g_code']}: {row['description']}" if pd.isna(row['s_code'])
    else f"{row['g_code']}-{row['s_code']}: {row['description']}", axis=1
)

# Preprocess progress_payments: Create datetime column
if not df_payment.empty:
    df_payment['payment_date'] = pd.to_datetime(df_payment['payment_date'])
    df_payment['year_month'] = df_payment['payment_date'].dt.to_period('M').astype(str)

# Preprocess summary_costs: Calculate variance percentage
if not df_summary.empty:
    df_summary['variance_pct'] = (df_summary['variance_budget'] / df_summary['budget'] * 100).round(2).fillna(0)

# Sidebar for analysis selection
st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
analysis_type = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
    [
        "üëÄ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        "üìà ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á",
        "üö® ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á",
        "üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
        "üå≥ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô",
        "üìä ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå",
        "üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
        "üèó ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"
    ]
)

# Additional Filter
st.sidebar.markdown("---")
st.sidebar.subheader("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
category_filter = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô (g_code) - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö actual_costs ‡πÅ‡∏•‡∏∞ summary_costs",
    options=df_actual['g_code'].unique() if not df_actual.empty else [],
    default=df_actual['g_code'].unique() if not df_actual.empty else []
)
project_filter = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress_payments",
    options=df_payment['project_no'].unique() if not df_payment.empty else [],
    default=df_payment['project_no'].unique() if not df_payment.empty else []
)

# Apply filters
if category_filter:
    df_actual = df_actual[df_actual['g_code'].isin(category_filter)]
    if not df_summary.empty:
        df_summary = df_summary[df_summary['g_code'].isin(category_filter)]
if project_filter:
    if not df_payment.empty:
        df_payment = df_payment[df_payment['project_no'].isin(project_filter)]

# Main title and description
st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á")
st.markdown("‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (CEO, CFO, PM) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á")

# Analysis Sections
if analysis_type == "üìä ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå":
    st.subheader("üìä ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (CPI, SPI, EAC)")
    df_filtered = df_actual[df_actual['g_code'].isin(category_filter)] if category_filter else df_actual
    total_budget = df_filtered['total_budget'].sum()
    acwp = df_filtered['total_actual'].sum()
    bcwp = df_filtered['bcwp'].sum()
    ev = df_filtered['ev'].sum()
    cpi = bcwp / acwp if acwp != 0 else 0
    spi = bcwp / ev if ev != 0 else 0
    eac = acwp + (total_budget - bcwp)
    col1, col2, col3 = st.columns(3)
    col1.metric("üí∞ Total Budget (BAC)", f"‡∏ø{total_budget:,.2f}")
    col2.metric("üì¶ ACWP (Actual Cost)", f"‡∏ø{acwp:,.2f}")
    col3.metric("üìå BCWP (Earned Value)", f"‡∏ø{bcwp:,.2f}")
    col4, col5, col6 = st.columns(3)
    col4.metric("‚öôÔ∏è CPI (Cost Performance Index)", f"{cpi:.2f}")
    col5.metric("‚è± SPI (Schedule Performance Index)", f"{spi:.2f}")
    col6.metric("üîÆ EAC (Estimate at Completion)", f"‡∏ø{eac:,.2f}")
    indices_df = pd.DataFrame({"‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î": ["CPI", "SPI"], "‡∏Ñ‡πà‡∏≤": [cpi, spi]})
    fig_indices = px.bar(indices_df, x="‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î", y="‡∏Ñ‡πà‡∏≤", title="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö CPI ‡πÅ‡∏•‡∏∞ SPI",
                         color="‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î", color_discrete_sequence=['#1f77b4', '#ff7f0e'],
                         labels={'‡∏Ñ‡πà‡∏≤': '‡∏Ñ‡πà‡∏≤ index'})
    fig_indices.add_hline(y=1.0, line_dash="dash", line_color="red", annotation_text="‡πÄ‡∏Å‡∏ì‡∏ë‡πå 1.0")
    st.plotly_chart(fig_indices, use_container_width=True)
    st.markdown("### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
    st.dataframe(df_filtered[['g_code', 's_code', 'description', 'total_budget', 'total_actual', 'bcwp', 'ev']])
    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CPI < 1**: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    - **SPI < 1**: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    - **EAC**: ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    """)

elif analysis_type == "üëÄ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    st.subheader("üîç ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    df_s = df_actual[df_actual['s_code'].notna()].copy()
    total_budget = df_s['total_budget'].sum()
    total_actual = df_s['total_actual'].sum()
    total_balance = df_s['bg_balance'].sum()
    total_submit = df_s['ev'].sum()
    total_certificate = df_s['bcwp'].sum()
    total_uncertified = df_s['pg_submit_balance'].sum()
    variance_pct = (total_balance / total_budget * 100) if total_budget > 0 else 0
    col1, col2, col3 = st.columns(3)
    col1.metric("üì¶ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°", f"‡∏ø{total_budget:,.2f}")
    col2.metric("üí∏ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏ß‡∏°", f"‡∏ø{total_actual:,.2f}")
    col3.metric("‚úÖ ‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"‡∏ø{total_balance:,.2f}", delta="Positive" if total_balance > 0 else "Negative")
    col4, col5, col6 = st.columns(3)
    col4.metric("üßæ ‡∏¢‡∏≠‡∏î‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"‡∏ø{total_submit:,.2f}")
    col5.metric("üìú ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß", f"‡∏ø{total_certificate:,.2f}")
    col6.metric("‚è≥ ‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á", f"‡∏ø{total_uncertified:,.2f}")
    pie_df = pd.DataFrame({
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": ["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á", "‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": [total_actual, total_balance if total_balance > 0 else 0]
    })
    fig_pie = px.pie(pie_df, names="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
                     color_discrete_sequence=['#ff7f0e', '#2ca02c'])
    st.plotly_chart(fig_pie, use_container_width=True)
    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CEO**: ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    - **CFO**: ‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
    - **PM**: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
    """)

elif analysis_type == "üö® ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á":
    st.subheader("‚ö†Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")
    st.markdown(f"**Debug**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô df_actual: {len(df_actual)}")
    risk_df = df_actual[(df_actual['bg_balance'] < 0) | (df_actual['pg_submit_balance'] > 1000000)][
        ['g_code', 's_code', 'description', 'total_budget', 'total_actual', 'bg_balance', 'variance_percentage', 'pg_submit_balance']
    ].copy()
    st.markdown(f"**Debug**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á: {len(risk_df)}")
    if risk_df.empty:
        st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")
    else:
        st.warning(f"‡∏û‡∏ö {len(risk_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")
        risk_df['variance_percentage'] = risk_df['variance_percentage'].apply(lambda x: f"{x:.2f}%")
        st.dataframe(risk_df.style.format({
            "total_budget": "{:,.2f}", "total_actual": "{:,.2f}", 
            "bg_balance": "{:,.2f}", "pg_submit_balance": "{:,.2f}"
        }), use_container_width=True)
        over_budget = df_actual[df_actual['bg_balance'] < 0].copy()
        if not over_budget.empty:
            top10 = over_budget.sort_values('bg_balance').head(10)
            fig_top10 = px.bar(
                top10, x='description', y='bg_balance', color='bg_balance',
                title="10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
                labels={'bg_balance': '‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ö‡∏≤‡∏ó)'}, color_continuous_scale='Reds'
            )
            st.plotly_chart(fig_top10, use_container_width=True)
        st.markdown("""
        **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
        - **CEO**: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        - **CFO**: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ pg_submit_balance ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
        - **PM**: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏™‡∏î‡∏∏
        """)

elif analysis_type == "üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô":
    st.subheader("üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á")
    st.markdown(f"**Debug**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô df_actual: {len(df_actual)}")
    payment_df = df_actual[df_actual['ev'] > 0][['g_code', 's_code', 'description', 'ev', 'bcwp']].copy()
    st.markdown(f"**Debug**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ ev > 0: {len(payment_df)}")
    if payment_df.empty:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô (ev > 0) ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        st.markdown("**Debug**: ‡∏™‡∏£‡∏∏‡∏õ ev ‡πÅ‡∏•‡∏∞ bcwp")
        st.write(df_actual[['ev', 'bcwp']].describe())
    else:
        payment_df['certification_rate'] = (payment_df['bcwp'] / payment_df['ev'] * 100).round(2)
        fig_payment = px.bar(
            payment_df, x='description', y=['ev', 'bcwp'],
            title="‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
            barmode='group', labels={'value': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)', 'description': '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'},
            color_discrete_map={'ev': '#1f77b4', 'bcwp': '#ff7f0e'}
        )
        st.plotly_chart(fig_payment, use_container_width=True)
        fig_line = go.Figure()
        fig_line.add_trace(go.Scatter(
            x=payment_df['description'], y=payment_df['ev'], name="‡∏¢‡∏≠‡∏î‡πÄ‡∏ö‡∏¥‡∏Å",
            mode='lines+markers', line=dict(color='#1f77b4')
        ))
        fig_line.add_trace(go.Scatter(
            x=payment_df['description'], y=payment_df['bcwp'], name="‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
            mode='lines+markers', line=dict(color='#ff7f0e')
        ))
        fig_line.update_layout(
            title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
            xaxis_title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)",
            template='plotly_white'
        )
        st.plotly_chart(fig_line, use_container_width=True)
        st.dataframe(payment_df[['g_code', 's_code', 'description', 'ev', 'bcwp', 'certification_rate']].style.format({
            "ev": "{:,.2f}", "bcwp": "{:,.2f}", "certification_rate": "{:.2f}%"
        }), use_container_width=True)
        st.markdown("""
        **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
        - **CEO**: ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
        - **CFO**: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        - **PM**: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏á‡∏≤‡∏ô
        """)

elif analysis_type == "üå≥ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô":
    st.subheader("üå≥ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô")
    df_s = df_actual[df_actual['s_code'].notna()].copy()
    fig_treemap = px.treemap(
        df_s, path=['to_column', 'g_code', 's_code'], values='total_actual',
        title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô",
        color='variance_percentage', color_continuous_scale='RdYlGn',
        labels={'total_actual': '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á (‡∏ö‡∏≤‡∏ó)', 'variance_percentage': '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô'}
    )
    st.plotly_chart(fig_treemap, use_container_width=True)
    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CEO**: ‡πÄ‡∏´‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
    - **CFO**: ‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏á‡∏ö
    - **PM**: ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏á‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    """)

elif analysis_type == "üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á":
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤")
    if df_payment.empty:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á progress_payments")
    else:
        st.markdown(f"**Debug**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô progress_payments: {len(df_payment)}")
        trend_df = df_payment.groupby('year_month')[['progress_submit', 'certificate', 'submit_balance']].sum().reset_index()
        fig_trend = go.Figure()
        fig_trend.add_trace(go.Scatter(
            x=trend_df['year_month'], y=trend_df['progress_submit'], name="‡∏¢‡∏≠‡∏î‡πÄ‡∏ö‡∏¥‡∏Å",
            mode='lines+markers', line=dict(color='#1f77b4')
        ))
        fig_trend.add_trace(go.Scatter(
            x=trend_df['year_month'], y=trend_df['certificate'], name="‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
            mode='lines+markers', line=dict(color='#ff7f0e')
        ))
        fig_trend.add_trace(go.Scatter(
            x=trend_df['year_month'], y=trend_df['submit_balance'], name="‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
            mode='lines+markers', line=dict(color='#d62728')
        ))
        fig_trend.update_layout(
            title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤",
            xaxis_title="‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)",
            template='plotly_white'
        )
        st.plotly_chart(fig_trend, use_container_width=True)
        st.dataframe(trend_df.style.format({
            "progress_submit": "{:,.2f}", "certificate": "{:,.2f}", "submit_balance": "{:,.2f}"
        }), use_container_width=True)
        st.markdown("""
        **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
        - **CEO**: ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
        - **CFO**: ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏ö‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡πà‡∏á‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á
        - **PM**: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö
        """)

elif analysis_type == "üèó ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå":
    st.subheader("üèó ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå")
    if df_summary.empty:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á summary_costs")
    else:
        st.markdown(f"**Debug**: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô summary_costs: {len(df_summary)}")
        fig_compare = px.bar(
            df_summary, x='description', y=['budget', 'actual_cost_ac', 'budget_balance_ac'],
            title="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô",
            barmode='group', labels={'value': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)', 'description': '‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô'},
            color_discrete_map={'budget': '#1f77b4', 'actual_cost_ac': '#ff7f0e', 'budget_balance_ac': '#2ca02c'}
        )
        st.plotly_chart(fig_compare, use_container_width=True)
        st.dataframe(df_summary[['g_code', 's_code', 'description', 'budget', 'actual_cost_ac', 'budget_balance_ac', 'variance_pct']].style.format({
            "budget": "{:,.2f}", "actual_cost_ac": "{:,.2f}", "budget_balance_ac": "{:,.2f}", "variance_pct": "{:.2f}%"
        }), use_container_width=True)
        st.markdown("""
        **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
        - **CEO**: ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ variance ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏°‡∏≤‡∏Å‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        - **CFO**: ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ budget_balance_ac ‡∏ï‡πà‡∏≥‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
        - **PM**: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
        """)

# Footer
st.markdown("---")
st.markdown("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: 30 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568")