import streamlit as st
import pandas as pd
from sqlalchemy import create_engine

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL
engine = create_engine("postgresql://your_user:your_password@your_host:your_port/your_db")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
summary_query = "SELECT * FROM summary_costs"
actual_query = "SELECT * FROM actual_costs"

summary_df = pd.read_sql(summary_query, engine)
actual_df = pd.read_sql(actual_query, engine)

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: merge ‡∏à‡∏≤‡∏Å g_code ‡πÅ‡∏•‡∏∞ s_code
merged_df = pd.merge(summary_df, actual_df, on=['g_code', 's_code'], how='left')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Streamlit
st.title("üîç Construction Budget vs Actual Analysis")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Filter dropdown
g_code_options = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + sorted(merged_df['g_code'].dropna().unique().tolist())
selected_g_code = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å G-Code", g_code_options)

if selected_g_code != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
    filtered_df = merged_df[merged_df['g_code'] == selected_g_code]
else:
    filtered_df = merged_df.copy()

s_code_options = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] + sorted(filtered_df['s_code'].dropna().unique().tolist())
selected_s_code = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å S-Code", s_code_options)

if selected_s_code != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
    filtered_df = filtered_df[filtered_df['s_code'] == selected_s_code]

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì summary
filtered_df['boq'] = pd.to_numeric(filtered_df['boq'], errors='coerce')
filtered_df['actual_cost_all'] = pd.to_numeric(filtered_df['actual_cost_all'], errors='coerce')

total_budget = filtered_df['boq'].sum()
total_actual = filtered_df['actual_cost_all'].sum()
usage_percent = (total_actual / total_budget * 100) if total_budget else 0
remaining = total_budget - total_actual

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
st.metric("üìã ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏° (BOQ)", f"{total_budget:,.2f} ‡∏ö‡∏≤‡∏ó")
st.metric("üí∏ ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_actual:,.2f} ‡∏ö‡∏≤‡∏ó")
st.metric("üìä ‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (%)", f"{usage_percent:.2f} %")
st.metric("üíº ‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{remaining:,.2f} ‡∏ö‡∏≤‡∏ó")

st.divider()
st.subheader("üìë ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô")

st.dataframe(filtered_df[[
    'g_code', 's_code', 'description', 'boq', 
    'actual_cost_all', 'budget_balance_ac', 'variance_budget'
]].rename(columns={
    'g_code': 'G-Code',
    's_code': 'S-Code',
    'description': '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
    'boq': '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (BOQ)',
    'actual_cost_all': '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á',
    'budget_balance_ac': '‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á',
    'variance_budget': '‡∏á‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡πà‡∏≠‡∏°‡∏•‡πâ‡∏≥ (Variance)'
}))
