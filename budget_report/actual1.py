import os
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import psycopg2
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set page configuration
st.set_page_config(layout="wide", page_title="‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á")

# Function to load data from database
@st.cache_data(show_spinner=False)
def load_data_from_db():
    conn = psycopg2.connect(os.getenv("DATABASE_URL"))
    query = "SELECT * FROM actual_costs"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# Load data
df = load_data_from_db()

# Data preprocessing
numeric_cols = [
    'boq', 'bg_overhead', 'bg_material', 'bg_labour', 'bg_subcontract', 'total_budget',
    'ac_overhead', 'ac_material', 'ac_labour', 'ac_subcontract', 'total_actual',
    'bg_balance', 'pg_submit', 'pg_certificate', 'pg_submit_balance'
]
for col in numeric_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Calculate percentage variance
df['variance_percentage'] = (df['bg_balance'] / df['total_budget'] * 100).round(2).fillna(0)

# Handle NULL values in 'to' column for treemap
df['to'] = df['to'].fillna('root')

# Create hierarchy label for treemap
df['hierarchy_label'] = df.apply(
    lambda row: f"{row['g_code']}: {row['description']}" if pd.isna(row['s_code'])
    else f"{row['g_code']}-{row['s_code']}: {row['description']}", axis=1
)

# Sidebar for analysis selection
st.sidebar.title("‡πÄ‡∏°‡∏ô‡∏π‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
analysis_type = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
    [
        "üëÄ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        "üìà ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á",
        "üö® ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á",
        "üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
        "üå≥ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô"
    ]
)

# Main title and description
st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á")
st.markdown("‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (CEO, CFO, PM) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á")

# Analysis Sections
if analysis_type == "üëÄ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    st.subheader("üîç ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    # Summary Metrics
    total_budget = df['total_budget'].sum()
    total_actual = df['total_actual'].sum()
    total_balance = df['bg_balance'].sum()
    total_submit = df['pg_submit'].sum()
    total_certificate = df['pg_certificate'].sum()
    total_uncertified = df['pg_submit_balance'].sum()
    variance_pct = (total_balance / total_budget * 100) if total_budget > 0 else 0

    col1, col2, col3 = st.columns(3)
    col1.metric("üì¶ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°", f"‡∏ø{total_budget:,.2f}")
    col2.metric("üí∏ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏ß‡∏°", f"‡∏ø{total_actual:,.2f}")
    col3.metric("‚úÖ ‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"‡∏ø{total_balance:,.2f}", delta="Positive" if total_balance > 0 else "Negative")

    col4, col5, col6 = st.columns(3)
    col4.metric("üßæ ‡∏¢‡∏≠‡∏î‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"‡∏ø{total_submit:,.2f}")
    col5.metric("üìú ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß", f"‡∏ø{total_certificate:,.2f}")
    col6.metric("‚è≥ ‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á", f"‡∏ø{total_uncertified:,.2f}")

    # Pie Chart: Cost Structure
    pie_df = pd.DataFrame({
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": ["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á", "‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô": [total_actual, total_balance if total_balance > 0 else 0]
    })
    fig_pie = px.pie(pie_df, names="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢",
                     color_discrete_sequence=['#ff7f0e', '#2ca02c'])
    st.plotly_chart(fig_pie, use_container_width=True)

    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CEO**: ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
    - **CFO**: ‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
    - **PM**: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡∏±‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    """)

elif analysis_type == "üìà ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á":
    st.subheader("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á")

    # Category Comparison
    categories = {
        "‡∏Ñ‡πà‡∏≤‡πÇ‡∏™‡∏´‡∏∏‡πâ‡∏¢": ("bg_overhead", "ac_overhead"),
        "‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏": ("bg_material", "ac_material"),
        "‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô": ("bg_labour", "ac_labour"),
        "‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏á": ("bg_subcontract", "ac_subcontract")
    }

    comparison = []
    for name, (bg_col, ac_col) in categories.items():
        bg = df[bg_col].sum()
        ac = df[ac_col].sum()
        comparison.append({
            "‡∏´‡∏°‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢": name,
            "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": bg,
            "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á": ac,
            "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á": bg - ac
        })

    comp_df = pd.DataFrame(comparison)
    st.dataframe(comp_df.style.format({"‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì": "{:,.2f}", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á": "{:,.2f}", "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á": "{:,.2f}"}))

    # Bar Chart: Cost Category Comparison
    bar_df = comp_df.melt(id_vars="‡∏´‡∏°‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", value_vars=["‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á"], 
                          var_name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
    fig_bar = px.bar(bar_df, x="‡∏´‡∏°‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", color="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", barmode="group",
                     title="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î",
                     color_discrete_sequence=['#1f77b4', '#ff7f0e'])
    st.plotly_chart(fig_bar, use_container_width=True)

    # Pie Charts: Budget and Actual Breakdown
    breakdown_df = pd.DataFrame({
        '‡∏´‡∏°‡∏ß‡∏î': ['‡∏Ñ‡πà‡∏≤‡πÇ‡∏™‡∏´‡∏∏‡πâ‡∏¢', '‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏', '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô', '‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏á'],
        '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì': [df[bg_col].sum() for _, bg_col in categories.values()],
        '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á': [df[ac_col].sum() for _, ac_col in categories.values()]
    })

    col1, col2 = st.columns(2)
    fig_pie_budget = px.pie(breakdown_df, values='‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì', names='‡∏´‡∏°‡∏ß‡∏î', title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
                            color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
    fig_pie_actual = px.pie(breakdown_df, values='‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á', names='‡∏´‡∏°‡∏ß‡∏î', title="‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á",
                            color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'])
    col1.plotly_chart(fig_pie_budget, use_container_width=True)
    col2.plotly_chart(fig_pie_actual, use_container_width=True)

    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CEO**: ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î
    - **CFO**: ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô
    - **PM**: ‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô) ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô
    """)

elif analysis_type == "üö® ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á":
    st.subheader("‚ö†Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")

    # High-Risk Items: Negative balance or high uncertified payments
    risk_df = df[(df['bg_balance'] < 0) | (df['pg_submit_balance'] > 1000000)].copy()
    risk_df = risk_df[['g_code', 's_code', 'description', 'total_budget', 'total_actual', 
                       'bg_balance', 'variance_percentage', 'pg_submit_balance']]
    risk_df['variance_percentage'] = risk_df['variance_percentage'].apply(lambda x: f"{x:.2f}%")

    if risk_df.empty:
        st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")
    else:
        st.warning(f"‡∏û‡∏ö {len(risk_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")
        st.dataframe(risk_df.style.format({
            "total_budget": "{:,.2f}", "total_actual": "{:,.2f}", 
            "bg_balance": "{:,.2f}", "pg_submit_balance": "{:,.2f}"
        }), use_container_width=True)

        # Top 10 Over-Budget Items
        over_budget = df[df['bg_balance'] < 0].copy()
        if not over_budget.empty:
            top10 = over_budget.sort_values('bg_balance').head(10)
            fig_top10 = px.bar(
                top10, x='description', y='bg_balance', color='bg_balance',
                title="10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
                labels={'bg_balance': '‡∏á‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ö‡∏≤‡∏ó)'}, color_continuous_scale='Reds'
            )
            st.plotly_chart(fig_top10, use_container_width=True)

    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CEO**: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    - **CFO**: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ pg_submit_balance ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡πà‡∏á‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á
    - **PM**: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï‡∏´‡∏¢‡∏≤‡∏ö) ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏™‡∏î‡∏∏
    """)

elif analysis_type == "üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô":
    st.subheader("üí∞ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á")

    payment_df = df[df['pg_submit'] > 0][['g_code', 's_code', 'description', 'pg_submit', 'pg_certificate']].copy()
    payment_df['certification_rate'] = (payment_df['pg_certificate'] / payment_df['pg_submit'] * 100).round(2)

    # Bar Chart: Payment Status
    fig_payment = px.bar(
        payment_df, x='description', y=['pg_submit', 'pg_certificate'],
        title="‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        barmode='group', labels={'value': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)', 'description': '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'},
        color_discrete_map={'pg_submit': '#1f77b4', 'pg_certificate': '#ff7f0e'}
    )
    st.plotly_chart(fig_payment, use_container_width=True)

    # Line Chart: Certification Progress
    fig_line = go.Figure()
    fig_line.add_trace(go.Scatter(
        x=payment_df['description'], y=payment_df['pg_submit'], name="‡∏¢‡∏≠‡∏î‡πÄ‡∏ö‡∏¥‡∏Å",
        mode='lines+markers', line=dict(color='#1f77b4')
    ))
    fig_line.add_trace(go.Scatter(
        x=payment_df['description'], y=payment_df['pg_certificate'], name="‡∏¢‡∏≠‡∏î‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á",
        mode='lines+markers', line=dict(color='#ff7f0e')
    ))
    fig_line.update_layout(
        title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô",
        xaxis_title="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)",
        template='plotly_white'
    )
    st.plotly_chart(fig_line, use_container_width=True)

    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CEO**: ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    - **CFO**: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
    - **PM**: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏á‡∏≤‡∏ô
    """)

elif analysis_type == "üå≥ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô":
    st.subheader("üå≥ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô")

    # Treemap: Hierarchical Cost Distribution
    treemap_df = df[df['total_actual'] > 0].copy()
    fig_treemap = px.treemap(
        treemap_df, path=['to', 'g_code', 'hierarchy_label'], values='total_actual',
        title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô",
        color='bg_balance', color_continuous_scale='RdYlGn',
        color_continuous_midpoint=0
    )
    fig_treemap.update_layout(margin=dict(t=50, l=25, r=25, b=25))
    st.plotly_chart(fig_treemap, use_container_width=True)

    st.markdown("""
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å**:
    - **CEO**: ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢
    - **CFO**: ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï)
    - **PM**: ‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ bg_balance ‡∏ï‡∏¥‡∏î‡∏•‡∏ö (‡∏™‡∏µ‡πÅ‡∏î‡∏á) ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    """)

# Additional Filter
st.sidebar.markdown("---")
st.sidebar.subheader("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
category_filter = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏á‡∏≤‡∏ô (g_code)",
    options=df['g_code'].unique(),
    default=df['g_code'].unique()
)
if category_filter:
    df = df[df['g_code'].isin(category_filter)]

# Footer
st.markdown("---")
st.markdown("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: 29 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2568")