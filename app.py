import streamlit as st
import pandas as pd
import joblib
from modules.data_loader import load_all_data
from modules.train_cost_progress_model import extract_cost_progress_features

# ==== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ====
data = load_all_data("data1")

# ==== ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° project_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ strip ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ====
projects_df = data['projects']
projects_df['project_id'] = projects_df['project_id'].astype(str).str.strip()
for key, df in data.items():
    if 'project_id' in df.columns:
        data[key]['project_id'] = df['project_id'].astype(str).str.strip()

project_ids = sorted(projects_df['project_id'].unique())
selected_project = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", project_ids, index=0, placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£...")

# ==== ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ====
project_data = {
    k: df[df['project_id'] == selected_project]
    for k, df in data.items()
    if 'project_id' in df.columns
}

# ==== ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß ====
st.title("üìä AI Budget Alert Dashboard")
st.markdown(f"### üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: `{selected_project}`")

# ==== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Cost vs Progress ====
st.subheader("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Cost vs Progress")

try:
    cost_model = joblib.load("saved_models/cost_progress_model.pkl")
except FileNotFoundError:
    cost_model = None
    st.warning("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• cost_progress_model.pkl ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
progress_pct, spent_pct = extract_cost_progress_features(project_data)

col1, col2 = st.columns(2)
col1.metric("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (%)", f"{progress_pct}%")
col2.metric("‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á (%)", f"{spent_pct}%")

# ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
if cost_model:
    result = cost_model.predict([[progress_pct, spent_pct]])[0]
    prediction_text = "‚ö†Ô∏è ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤" if result == 1 else "‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥"
    st.info(f"üìå ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å AI: {prediction_text}")

# ==== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Vendor ====
st.subheader("üì¶ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Vendor ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

try:
    vendor_model = joblib.load("saved_models/vendor_model.pkl")
except FileNotFoundError:
    vendor_model = None
    st.warning("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• vendor_model.pkl ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô")

if vendor_model:
    vendor_df = data['vendors']
    expense_df = project_data.get('expenses', pd.DataFrame())

    if not expense_df.empty:
        vendor_used = expense_df['vendor'].dropna().unique()
        vendor_info = vendor_df[vendor_df['vendor_name'].isin(vendor_used)].copy()

        if not vendor_info.empty:
            used_features = ['rating', 'payment_terms', 'total_contracts', 'total_value']
            vendor_features = vendor_info[['vendor_name'] + used_features].copy()
            vendor_features = pd.get_dummies(vendor_features, columns=['rating', 'payment_terms'], drop_first=True)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° missing columns ‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
            for col in vendor_model.feature_names_in_:
                if col not in vendor_features.columns:
                    vendor_features[col] = 0

            vendor_features = vendor_features[vendor_model.feature_names_in_]
            preds = vendor_model.predict(vendor_features)
            probs = vendor_model.predict_proba(vendor_features)[:, 1]

            vendor_info['on_time_prediction'] = preds
            vendor_info['on_time_probability'] = (probs * 100).round(2)
            vendor_info['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = vendor_info['on_time_prediction'].map({1: '‚úÖ ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤', 0: '‚ö†Ô∏è ‡∏≠‡∏≤‡∏à‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤'})

            st.dataframe(vendor_info[['vendor_name', 'rating', 'payment_terms',
                                      'total_contracts', 'total_value', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'on_time_probability']],
                         use_container_width=True)
        else:
            st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Vendor ‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô vendors.csv")
    else:
        st.info("‚ÑπÔ∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Expense")
