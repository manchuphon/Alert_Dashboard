import pandas as pd
import numpy as np
from datetime import datetime

def calculate_evm_metrics(projects_csv, budgets_csv, expenses_csv, resources_csv, vendors_csv, milestones_csv):
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ CPI, SPI, BCWP, ACWP, EAC ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
    
    Parameters:
    -----------
    projects_csv : str - path ‡πÑ‡∏ü‡∏•‡πå projects.csv
    budgets_csv : str - path ‡πÑ‡∏ü‡∏•‡πå budgets.csv  
    expenses_csv : str - path ‡πÑ‡∏ü‡∏•‡πå expenses.csv
    resources_csv : str - path ‡πÑ‡∏ü‡∏•‡πå resources.csv
    vendors_csv : str - path ‡πÑ‡∏ü‡∏•‡πå vendors.csv
    milestones_csv : str - path ‡πÑ‡∏ü‡∏•‡πå milestones.csv
    
    Returns:
    --------
    pandas.DataFrame - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EVM metrics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
    """
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try:
        projects_df = pd.read_csv(projects_csv)
        budgets_df = pd.read_csv(budgets_csv)
        expenses_df = pd.read_csv(expenses_csv)
        resources_df = pd.read_csv(resources_csv)
        vendors_df = pd.read_csv(vendors_csv)
        milestones_df = pd.read_csv(milestones_csv)
        
        print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
        return None
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    try:
        projects_df['start_date'] = pd.to_datetime(projects_df['start_date'], errors='coerce')
        projects_df['end_date'] = pd.to_datetime(projects_df['end_date'], errors='coerce')
        expenses_df['expense_date'] = pd.to_datetime(expenses_df['expense_date'], errors='coerce')
        milestones_df['planned_date'] = pd.to_datetime(milestones_df['planned_date'], errors='coerce')
        milestones_df['actual_date'] = pd.to_datetime(milestones_df['actual_date'], errors='coerce')
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {e}")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EVM metrics
    results = []
    current_date = datetime.now()
    
    print(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EVM metrics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {len(projects_df)} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£...")
    
    for index, project in projects_df.iterrows():
        project_id = project['project_id']
        project_name = project['project_name']
        total_budget = project['total_budget']
        progress_percentage = project['progress_percentage']
        start_date = project['start_date']
        end_date = project['end_date']
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if pd.isna(total_budget) or pd.isna(progress_percentage):
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ {project_id} - {project_name}")
            continue
        
        # ===========================================
        # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BCWP (Budgeted Cost of Work Performed)
        # ===========================================
        # BCWP = Earned Value = ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏° √ó ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á
        bcwp = total_budget * (progress_percentage / 100)
        
        # ===========================================  
        # 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ACWP (Actual Cost of Work Performed)
        # ===========================================
        # ACWP = ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
        project_expenses = expenses_df[expenses_df['project_id'] == project_id]
        acwp = project_expenses['amount'].sum() if not project_expenses.empty else 0
        
        # ===========================================
        # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BCWS (Budgeted Cost of Work Scheduled)  
        # ===========================================
        # BCWS = Planned Value = ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô
        if pd.notna(start_date) and pd.notna(end_date):
            total_days = (end_date - start_date).days
            elapsed_days = (current_date - start_date).days
            
            if total_days > 0:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô
                planned_progress = min(100, max(0, (elapsed_days / total_days) * 100))
            else:
                planned_progress = 0
        else:
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            planned_progress = progress_percentage
        
        bcws = total_budget * (planned_progress / 100)
        
        # ===========================================
        # 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì CPI (Cost Performance Index)
        # ===========================================
        # CPI = BCWP / ACWP 
        # ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 = ‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô, ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 = ‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡πÅ‡∏ú‡∏ô
        if acwp > 0:
            cpi = bcwp / acwp
        else:
            cpi = float('inf') if bcwp > 0 else 1.0  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
        
        # ===========================================
        # 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SPI (Schedule Performance Index)
        # ===========================================  
        # SPI = BCWP / BCWS
        # ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 = ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô, ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 = ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô
        if bcws > 0:
            spi = bcwp / bcws
        else:
            spi = float('inf') if bcwp > 0 else 1.0  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ planned value
        
        # ===========================================
        # 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Cost Variance (CV) ‡πÅ‡∏•‡∏∞ Schedule Variance (SV)
        # ===========================================
        cost_variance = bcwp - acwp        # CV > 0 = ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏á‡∏ö, CV < 0 = ‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö
        schedule_variance = bcwp - bcws     # SV > 0 = ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô, SV < 0 = ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô
        
        # ===========================================
        # 7. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EAC (Estimate at Completion)
        # ===========================================
        # EAC = ACWP + (BAC - BCWP) / CPI
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        if cpi > 0 and not np.isinf(cpi):
            work_remaining = total_budget - bcwp  # ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            eac = acwp + (work_remaining / cpi)
        else:
            eac = total_budget  # ‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å CPI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
        
        # ===========================================
        # 8. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        # ===========================================
        
        # Variance at Completion (VAC)
        vac = total_budget - eac
        
        # To Complete Performance Index (TCPI)
        work_remaining = total_budget - bcwp
        budget_remaining = total_budget - acwp
        
        if budget_remaining > 0:
            tcpi = work_remaining / budget_remaining
        else:
            tcpi = float('inf') if work_remaining > 0 else 0
        
        # Percent Complete
        percent_complete = progress_percentage
        
        # Percent Spent  
        percent_spent = (acwp / total_budget * 100) if total_budget > 0 else 0
        
        # ===========================================
        # 9. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        # ===========================================
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
        if np.isinf(cpi) or np.isinf(spi):
            status = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
            performance_status = "Unknown"
        elif cpi >= 1.0 and spi >= 1.0:
            status = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
            performance_status = "On Track"
        elif cpi >= 0.9 and spi >= 0.9:
            status = "‡∏õ‡∏Å‡∏ï‡∏¥"
            performance_status = "Minor Issues"
        elif cpi >= 0.8 or spi >= 0.8:
            status = "‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á"
            performance_status = "At Risk"
        else:
            status = "‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
            performance_status = "Critical"
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        risk_score = 0
        
        if not np.isinf(cpi):
            if cpi < 0.8:
                risk_score += 3
            elif cpi < 0.9:
                risk_score += 2
            elif cpi < 1.0:
                risk_score += 1
        
        if not np.isinf(spi):
            if spi < 0.8:
                risk_score += 3
            elif spi < 0.9:
                risk_score += 2
            elif spi < 1.0:
                risk_score += 1
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Cost Variance
        if abs(cost_variance) > total_budget * 0.2:
            risk_score += 2
        elif abs(cost_variance) > total_budget * 0.1:
            risk_score += 1
        
        if risk_score >= 5:
            risk_level = "‡∏™‡∏π‡∏á"
        elif risk_score >= 3:
            risk_level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            risk_level = "‡∏ï‡πà‡∏≥"
        
        # ===========================================
        # 10. ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        # ===========================================
        result = {
            'project_id': project_id,
            'project_name': project_name,
            'project_type': project.get('project_type', 'N/A'),
            'client': project.get('client', 'N/A'),
            'project_manager': project.get('project_manager', 'N/A'),
            'total_budget': total_budget,
            'progress_percentage': progress_percentage,
            'planned_progress': planned_progress,
            
            # Core EVM Metrics
            'bcwp': bcwp,                    # Budgeted Cost of Work Performed (Earned Value)
            'acwp': acwp,                    # Actual Cost of Work Performed
            'bcws': bcws,                    # Budgeted Cost of Work Scheduled (Planned Value)
            'cpi': cpi,                      # Cost Performance Index
            'spi': spi,                      # Schedule Performance Index
            'eac': eac,                      # Estimate at Completion
            
            # Additional Metrics
            'vac': vac,                      # Variance at Completion
            'tcpi': tcpi,                    # To Complete Performance Index
            'cost_variance': cost_variance,   # Cost Variance (CV)
            'schedule_variance': schedule_variance,  # Schedule Variance (SV)
            'percent_complete': percent_complete,
            'percent_spent': percent_spent,
            
            # Status and Risk
            'status': status,
            'performance_status': performance_status,
            'risk_level': risk_level,
            'risk_score': risk_score,
            
            # Dates
            'start_date': start_date,
            'end_date': end_date,
            'calculation_date': current_date
        }
        
        results.append(result)
        
        # ‡πÅ‡∏™‡∏î‡∏á progress
        if (index + 1) % 10 == 0:
            print(f"   ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß {index + 1}/{len(projects_df)} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    evm_df = pd.DataFrame(results)
    
    print(f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô {len(evm_df)} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    
    return evm_df

def print_evm_summary(evm_df):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EVM"""
    
    if evm_df is None or evm_df.empty:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ")
        return
    
    print("\n" + "="*80)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Earned Value Management")
    print("="*80)
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    total_projects = len(evm_df)
    total_budget = evm_df['total_budget'].sum()
    total_acwp = evm_df['acwp'].sum()
    total_bcwp = evm_df['bcwp'].sum()
    
    # CPI ‡πÅ‡∏•‡∏∞ SPI ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
    overall_cpi = total_bcwp / total_acwp if total_acwp > 0 else 0
    overall_spi = evm_df['spi'].replace([np.inf, -np.inf], np.nan).mean()
    
    print(f"\nüéØ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:")
    print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: {total_projects:,} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    print(f"   ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°: {total_budget:,.0f} ‡∏ö‡∏≤‡∏ó")
    print(f"   ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡∏£‡∏ß‡∏°: {total_acwp:,.0f} ‡∏ö‡∏≤‡∏ó")
    print(f"   Earned Value ‡∏£‡∏ß‡∏°: {total_bcwp:,.0f} ‡∏ö‡∏≤‡∏ó")
    print(f"   CPI ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: {overall_cpi:.3f}")
    print(f"   SPI ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {overall_spi:.3f}")
    print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {evm_df['progress_percentage'].mean():.1f}%")
    
    # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    status_counts = evm_df['status'].value_counts()
    print(f"\nüìà ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:")
    for status, count in status_counts.items():
        percentage = count / total_projects * 100
        print(f"   {status}: {count} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ({percentage:.1f}%)")
    
    # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    risk_counts = evm_df['risk_level'].value_counts()
    print(f"\n‚ö†Ô∏è ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:")
    for risk, count in risk_counts.items():
        percentage = count / total_projects * 100
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á{risk}: {count} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ({percentage:.1f}%)")
    
    # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    problem_projects = evm_df[
        (evm_df['cpi'] < 0.9) | (evm_df['spi'] < 0.9)
    ]
    
    if not problem_projects.empty:
        print(f"\nüö® ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á ({len(problem_projects)} ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£):")
        for _, project in problem_projects.head(5).iterrows():
            cpi_str = f"{project['cpi']:.2f}" if not np.isinf(project['cpi']) else "‚àû"
            spi_str = f"{project['spi']:.2f}" if not np.isinf(project['spi']) else "‚àû"
            print(f"   ‚Ä¢ {project['project_name']} (CPI: {cpi_str}, SPI: {spi_str})")
    
    print("="*80)

def export_evm_results(evm_df, output_file='evm_results.csv'):
    """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV"""
    
    if evm_df is None or evm_df.empty:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")
        return False
    
    try:
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
        export_df = evm_df.copy()
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ infinity ‡πÄ‡∏õ‡πá‡∏ô string
        export_df['cpi'] = export_df['cpi'].replace([np.inf, -np.inf], 'Infinity')
        export_df['spi'] = export_df['spi'].replace([np.inf, -np.inf], 'Infinity')
        export_df['eac'] = export_df['eac'].replace([np.inf, -np.inf], 'Infinity')
        export_df['tcpi'] = export_df['tcpi'].replace([np.inf, -np.inf], 'Infinity')
        
        # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
        export_df.to_csv(output_file, index=False, encoding='utf-8-sig')
        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å: {e}")
        return False

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EVM Metrics")
    print("="*50)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡πÑ‡∏ü‡∏•‡πå CSV
    file_paths = {
        'projects_csv': 'data1/projects.csv',
        'budgets_csv': 'data1/budgets.csv',
        'expenses_csv': 'data1/expenses.csv', 
        'resources_csv': 'data1/resources.csv',
        'vendors_csv': 'data1/vendors.csv',
        'milestones_csv': 'data1/milestones.csv'
    }
# ...existing code...
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EVM metrics
    results = calculate_evm_metrics(**file_paths)
    
    if results is not None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print_evm_summary(results)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
        print(f"\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (5 ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):")
        print("-"*120)
        cols_to_show = ['project_name', 'total_budget', 'progress_percentage', 
                       'bcwp', 'acwp', 'cpi', 'spi', 'eac', 'status']
        
        sample_df = results[cols_to_show].head()
        for col in ['total_budget', 'bcwp', 'acwp', 'eac']:
            sample_df[col] = sample_df[col].apply(lambda x: f"{x:,.0f}")
        for col in ['cpi', 'spi']:
            sample_df[col] = sample_df[col].apply(lambda x: f"{x:.3f}" if not np.isinf(x) else "‚àû")
        
        print(sample_df.to_string(index=False))
        
        # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        export_evm_results(results)
        
        print(f"\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå evm_results.csv ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    else:
        print("‚ùå ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")